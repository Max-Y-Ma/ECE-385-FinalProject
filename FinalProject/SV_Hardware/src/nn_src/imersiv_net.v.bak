/***********************************************************************/
//
//		Neural Network Source Code for Imersiv Net
//		Description: 784 Input Nodes, 1 Hidden Layer, 10 Output Nodes
//
//      784 Input Nodes -> 20 Hidden Nodes (Layer_1) -> 10 Output Nodes (Layer_2)
//						 
//		Date: 4/21/2023
//		Revision: v1.0
//		Authors: Max Ma & Dhruv Kulgod
//
/***********************************************************************/
`include "include.v"
`define NUM_IMAGE_REGS 28

module imersiv_net (
    input CLK,
    input RESET,
	input logic [31:0] IMAGE_OUT[`NUM_IMAGE_REGS],
	output logic [31:0] CHARACTER_REG
);

wire [31:0] out;
wire out_valid;

localparam IDLE = 'd0, SEND = 'd1;

// State Machine for Image Buffer Transfer to Layer 1
reg [`dataWidth-1:0] image_buffer_data;
reg image_buffer_valid;
// TODO: Write State Machine
assign image_buffer_data = {`dataWidth-1{1'b1}};
assign image_buffer_valid = 1'b1;

wire [`numNeuronLayer1-1:0] o1_valid;
wire [`numNeuronLayer1*`dataWidth-1:0] x1_out;
reg [`numNeuronLayer1*`dataWidth-1:0] holdData_1;
reg [`dataWidth-1:0] out_data_1;
reg data_out_valid_1;

Layer_1 #(.NN(`numNeuronLayer1), .numWeight(`numWeightLayer1), .dataWidth(`dataWidth), .sigmoidSize(`sigmoidSize), .weightIntWidth(`weightIntWidth)) Layer_1_(
	.CLK(CLK),
	.RESET(RESET),
	.x_valid(image_buffer_valid),
	.x_in(image_buffer_data),
	.o_valid(o1_valid),
	.x_out(x1_out)
);

// State machine for Data Pipelining
reg       state_1;
integer   count_1;
always @(posedge CLK)
begin
    if(RESET)
    begin
        state_1 <= IDLE;
        count_1 <= 0;
        data_out_valid_1 <=0;
    end
    else
    begin
        case(state_1)
            IDLE: begin
                count_1 <= 0;
                data_out_valid_1 <=0;
                if (o1_valid[0] == 1'b1)
                begin
                    holdData_1 <= x1_out;
                    state_1 <= SEND;
                end
            end
            SEND: begin
                out_data_1 <= holdData_1[`dataWidth-1:0];
                holdData_1 <= holdData_1>>`dataWidth;
                count_1 <= count_1 +1;
                data_out_valid_1 <= 1;
                if (count_1 == `numNeuronLayer1)
                begin
                    state_1 <= IDLE;
                    data_out_valid_1 <= 0;
                end
            end
        endcase
    end
end

wire [`numNeuronLayer2-1:0] o2_valid;
wire [`numNeuronLayer2*`dataWidth-1:0] x2_out;
reg [`numNeuronLayer2*`dataWidth-1:0] holdData_2;
reg [`dataWidth-1:0] out_data_2;
reg data_out_valid_2;

Layer_2 #(.NN(`numNeuronLayer2), .numWeight(`numWeightLayer2), .dataWidth(`dataWidth), .layerNum(2), .sigmoidSize(`sigmoidSize), .weightIntWidth(`weightIntWidth)) Layer_2_(
	.CLK(CLK),
	.RESET(RESET),
	.x_valid(data_out_valid_1),
	.x_in(out_data_1),
	.o_valid(o2_valid),
	.x_out(x2_out)
);

// State machine for Data Pipelining
reg       state_2;
integer   count_2;
always @(posedge CLK)
begin
    if(RESET)
    begin
        state_2 <= IDLE;
        count_2 <= 0;
        data_out_valid_2 <=0;
    end
    else
    begin
        case(state_2)
            IDLE: begin
                count_2 <= 0;
                data_out_valid_2 <=0;
                if (o2_valid[0] == 1'b1)
                begin
                    holdData_2 <= x2_out;
                    state_2 <= SEND;
                end
            end
            SEND: begin
                out_data_2 <= holdData_2[`dataWidth-1:0];
                holdData_2 <= holdData_2>>`dataWidth;
                count_2 <= count_2 +1;
                data_out_valid_2 <= 1;
                if (count_2 == `numNeuronLayer2)
                begin
                    state_2 <= IDLE;
                    data_out_valid_2 <= 0;
                end
            end
        endcase
    end
end

// Module to Determine Final Character Output
maxFinder #(.numInput(`numNeuronLayer2), .inputWidth(`dataWidth)) MF_ (
    .CLK(CLK),
    .i_data(x2_out),
    .i_valid(o2_valid),
    .o_data(out),
    .o_data_valid(out_valid)
);

endmodule
